// ************************************************************************** //
// *
// *    Components: Button
// *
// ************************************************************************** //

// TODO: Revoir le CSS de l'Ã©tat "disabled" du bouton

@use './../abstracts/mixins/corner';
@use './../abstracts/mixins/spaces';
@use './../abstracts/mixins/banner';
@use './../abstracts/mixins/pallet';
@use './../abstracts/mixins/transition';
@use './../abstracts/functions/color';

$_component: 'button';
$_classname: '#{$prefix}#{$_component}';

@include banner.header('Component #{$_component}');



// * =============================================
// *
// *    Component functions
// *
// * =============================================



// * =============================================
// *
// *    Component Properties
// *
// * =============================================

// * Default sizes and/or positions variables
// * =========================


// * Default theme variables
// * =========================


// * =============================================
// *
// *    Component Definition
// *
// * =============================================

.#{$_classname} {

    /// Button container
    /// --
    
    cursor: pointer;

    line-height: 1;
    border-width: 1px;
    border-style: solid;
    border-color: transparent;
    background-color: transparent;
    @include corner.rounded(6px);
    @include transition.set((background-color, border-color, color), .3s);


    /// Button Sizes
    /// --

    font-size: $spacer * 1;
    @include spaces.padding( $spacer * .6, $spacer * 1.4, $spacer * .6, $spacer * 1.4 );

    &-small {
        font-size: $spacer * .8;
        @include spaces.padding( $spacer * .4, $spacer * 1, $spacer * .4, $spacer * 1 );
    }

    &-large {
        font-size: $spacer * 1.6;
        @include spaces.padding( $spacer * 1, $spacer * 2, $spacer * 1, $spacer * 2 );
    }
    
    &-block {
        display: block;
        min-width: 100%;
    }


    /// Button pallet
    /// --
    
    @each $key, $value in $pallet {
        $shade: color.shade($value, 30%);
        $tint: color.tint($value, 60%);
        $contrastText: color.contrastText($shade);

        // Fill color
        // --
        &-#{$key} {
            color: $contrastText;
            background-color: var(--#{$key});
            border-color: var(--#{$key});

            &:not(.button-effect).active,
            &:not(.button-effect):hover {
                color: $contrastText;
                background-color: var(--#{$key}-shade);
                border-color: var(--#{$key}-shade);
            }
        }

        // Stroke (outline) color
        // --
        &-#{$key}-outline {
            @include pallet.outline($key);

            &:hover {
                color: $contrastText;
                background-color: var(--#{$key}-shade);
                border-color: var(--#{$key}-shade);
            }
        }
    }


    /// Button state
    /// --
    
    &[disabled],
    &[disabled]:hover {
        cursor: default;
        color: var(--muted);
    }


    & .no-border {
        border: none !important;
    }
}

[rel=js-button] {
    transition: background-color map-get($delays, 'normal');

    &.active {
        background-color: chocolate;
    }
}

// // No Border
// .button-no-border {
//     border: none !important;
// }