// ************************************************************************** //
// *
// *    Components: Accordion
// *
// ************************************************************************** //

@use 'sass:meta';
@use './../generated';
@use './../abstracts/mixins/var';
@use './../abstracts/mixins/flex';
@use './../abstracts/mixins/banner';
@use './../abstracts/mixins/corner';
@use './../abstracts/mixins/spaces';
@use './../abstracts/mixins/transition';

$COMPONENT: 'accordion';
$CLASSNAME: '#{$prefix}#{$COMPONENT}';

@include banner.header('Component #{$COMPONENT}');



// * =============================================
// *
// *    Component Properties
// *
// * =============================================

// * Default layout variables
// * =========================

$accordion--border-radius: 'small' !default;

$accordion--item--gap: -1px !default; // gap between items
$accordion--item--transition-speed: 'normal' !default;

$accordion--item--header--font-size: 1.2rem !default;
$accordion--item--header--padding-x: $spacer !default;
$accordion--item--header--padding-y: $spacer !default;

$accordion--item--content--max-height: if(meta.global-variable-exists('accordion--item--content--max-height', $module: generated), generated.$accordion--item--content--max-height, null) !default;
$accordion--item--content--padding-x: $spacer !default;
$accordion--item--content--padding-y: $spacer !default;


// * Default theme variables
// * =========================

/// Accordion Items
/// -------------------------

$accordion--item--border-color: $gray-500 !default;


/// Accordion Items Header
/// -------------------------

$accordion--item--header--text-color: $gray-700 !default;
$accordion--item--header--background-color: $gray-200 !default;


/// Accordion Items Open Header
/// -------------------------

$accordion--item-open--header--text-color: $gray-900 !default;
$accordion--item-open--header--background-color: $gray-400 !default;



// * =============================================
// *
// *    Component Definition
// *
// * =============================================

.#{$CLASSNAME} {

    /// Accordion Item
    /// --

    &-item {
        border-width: 1px;
        border-style: solid;
        @include var.set('border-color', 'accordion--item--border-color', $accordion--item--border-color);

        &:not(:first-child) {
            margin-top: $accordion--item--gap;
        }

        &:not(.open) {
            overflow: hidden;
        }

        @if $accordion--item--gap > 0 {
            @include corner.rounded(map-get($radius, $accordion--border-radius));
        }
        @else {
            &:first-child {
                @include corner.top(map-get($radius, $accordion--border-radius));
            }
            &:last-child {
                @include corner.bottom(map-get($radius, $accordion--border-radius));
            }
        }
    }

    
    /// Accordion header
    /// --
    
    &-header {
        @include var.set('color', 'accordion--item--header--text-color', $accordion--item--header--text-color);
        @include var.set('background-color', 'accordion--item--header--background-color', $accordion--item--header--background-color);
        font-size: $accordion--item--header--font-size;
        justify-content: space-between;
        cursor: pointer;
        border: none;
        width: 100%;

        @if $accordion--item--gap > 0 {
            @include corner.top(map-get($radius, $accordion--border-radius));
        }

        @include flex.row;
        @include spaces.margin(0,0,0,0);
        @include spaces.padding(
            $accordion--item--header--padding-y,
            $accordion--item--header--padding-x,
            $accordion--item--header--padding-y,
            $accordion--item--header--padding-x
        );
        @include transition.set((color, background-color), map-get($delays, $accordion--item--transition-speed));
    }
    &-item.open &-header {
        @include var.set('color', 'accordion--item-open--header--text-color', $accordion--item-open--header--text-color);
        @include var.set('background-color', 'accordion--item-open--header--background-color', $accordion--item-open--header--background-color);
    }
    @if $accordion--item--gap < 0 {
        &-item:first-child.open &-header {
            @include corner.top(map-get($radius, $accordion--border-radius));
        }
    }


    /// Accordion content
    /// --
    
    &-content {
        max-height: 0;
        overflow: hidden;
        @include transition.set((max-height), map-get($delays, $accordion--item--transition-speed));

        &-inner {
            @include spaces.padding(
                $accordion--item--content--padding-y,
                $accordion--item--content--padding-x,
                $accordion--item--content--padding-y,
                $accordion--item--content--padding-x
            );
        }
    }
    @if $accordion--item--content--max-height != null {
        &-item.open &-content {
            max-height: $accordion--item--content--max-height !important;
            overflow-y: auto;
        }
    }
}