// ************************************************************************** //
// *
// *    Components: Badge
// *
// ************************************************************************** //

@use './../abstracts/mixins/corner';
@use './../abstracts/mixins/spaces';
@use './../abstracts/mixins/banner';
@use './../abstracts/mixins/pallet';
@use './../abstracts/functions/color';

$_component: 'badge';
$_classname: '#{$prefix}#{$_component}';

@include banner.header('Component #{$_component}');


// * =============================================
// *
// *    Component functions
// *
// * =============================================



// * =============================================
// *
// *    Component Properties
// *
// * =============================================

// * Default layout variables
// * =========================


// * Default theme variables
// * =========================


// * =============================================
// *
// *    Component Definition
// *
// * =============================================

.#{$_classname} {

    /// Badge container
    /// --
    
    display: inline-flex;
    justify-content: center;
    align-items: center;
    border-width: 1px;
    border-style: solid;
    color: var(--white);
    font-weight: 700;
    @include corner.rounded($spacer);


    /// Badge sizes
    /// --

    & {
        @include spaces.padding( $spacer * .4, $spacer * .6, $spacer * .4, $spacer * .6 );
        // font-size: $spacer * .8;
        font-size: 0.75em;
        line-height: .8;
    }
    &-small {
        @include spaces.padding( $spacer * .3, $spacer * .4, $spacer * .3, $spacer * .4 );
        font-size: $spacer * .7;
        line-height: .6;
    }
    &-large {
        @include spaces.padding( $spacer * .6, $spacer * .8, $spacer * .6, $spacer * .8 );
        font-size: $spacer * 1;
        line-height: 1;
    }


    /// Badge Pallet
    /// --
    
    @each $key, $value in $pallet {
    
        $_shade       : color.shade($value, 30%);
        $_tint        : color.tint($value, 60%);
        $_contrastText: color.contrastText($_shade);
    
        // Fill color
        // --

        &-#{$key} {
            background-color: var(--#{$key});
            border-color: var(--#{$key});
        }

        // Stroke (outline) color
        // --

        &-#{$key}-outline {
            @include pallet.outline($key);
        }
    }
}