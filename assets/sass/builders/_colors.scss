// * ------------ @osw3/symfony-ux/assets/sass/builders/colors.scss ------------
// *
// *    Builder for CSS Colors variables
// *
// * ---------------------------------------------------------------------------

@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:color";
@use "sass:string";
@use './../builders/banner';
@use './../storages/prefix';
@use './../storages/colors' as store;
@use './../functions/color' as fnColor;
@use './../functions/collection' as fnCollection;
// @include banner.header('Colors');


// * Retrieve stored data
// * ---------------------------------------------

$colors : store.$colors;
$useless: store.$useless;


// * Unset useless colors
// * ---------------------------------------------

@if fnCollection.notEmpty($useless) {
    @each $key, $value in $colors {
        @if fnCollection.keyExists($useless, $key) {
            $colors: fnCollection.unset($colors, $key);
        }
    }
}


// * Build CSS
// * ---------------------------------------------

:root {
    @each $key, $value in $colors {

        --#{prefix.$prefix}#{$key}: #{$value};

        $tints: if(
            meta.type-of(store.$tints) == 'map' and map.has_key(store.$tints, $key),
            map.get(store.$tints, $key),
            ()
        );
        @if meta.type-of($tints) == 'number' {
            $tints: ($tints,); 
        }
        @if $tints and meta.type-of($tints) == 'list' and list.length($tints) > 0 {
            @for $i from 1 through list.length($tints) {
                $tint_percent: list.nth($tints, $i);
                $tint_color: fnColor.tint($value, $tint_percent);
                $tint_color_hex: fnColor.rgb-to-hex($tint_color);
                --#{prefix.$prefix}#{$key}--tint-#{string.slice(#{$tint_percent}, 1, -2)}: #{$tint_color_hex};
            }
        }

        $shades: if(
            meta.type-of(store.$shades) == 'map' and map.has_key(store.$shades, $key),
            map.get(store.$shades, $key),
            ()
        );
        @if meta.type-of($shades) == 'number' {
            $shades: ($shades,); 
        }
        @if $shades and meta.type-of($shades) == 'list' and list.length($shades) > 0 {
            @for $i from 1 through list.length($shades) {
                $shade_percent: list.nth($shades, $i);
                $shade_color: fnColor.shade($value, $shade_percent * 0.01);
                $shade_color_hex: fnColor.rgb-to-hex($shade_color);
                --#{prefix.$prefix}#{$key}--shade-#{string.slice(#{$shade_percent}, 1, -2)}: #{$shade_color_hex};
            }
        }

    }
}
