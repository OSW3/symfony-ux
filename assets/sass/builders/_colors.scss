// * ------------ @osw3/symfony-ux/assets/sass/builders/colors.scss ------------
// *
// *    Builder for CSS Colors variables
// *
// * ---------------------------------------------------------------------------

@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:color";
@use "sass:string";
@use './../builders/banner';
@use './../storages/prefix';
@use './../storages/colors' as store;
@use './../functions/color' as fnColor;
@use './../functions/collection' as fnCollection;
// @include banner.header('Colors');


// * Retrieve stored data
// * ---------------------------------------------

// $colors : store.$colors;
// $useless: store.$useless;
// $declinations : store.$declinations;


// // * Unset useless colors
// // * ---------------------------------------------

// @if fnCollection.notEmpty($useless) {
//     @each $key, $value in $colors {
//         @if fnCollection.keyExists($useless, $key) {
//             $colors: fnCollection.unset($colors, $key);
//         }
//     }
// }


// * Build CSS
// * ---------------------------------------------

// :root {
//     @each $color-name, $color-value in $colors {

//         --#{prefix.$prefix}#{$color-name}: #{$color-value};

//         @each $declination-name, $declination-rules in $declinations {
//             @if $color-name == $declination-name {
//                 @each $declination in $declination-rules {

//                     $mode : list.nth($declination, 1);
//                     $value: list.nth($declination, 2);

//                     @if $mode == tint {
//                         $color: fnColor.tint($color-value, $value);
//                         // $color: fnColor.rgb-to-hex($color);
//                         --#{prefix.$prefix}#{$color-name}-#{$mode}-#{string.slice(#{$value}, 1, -2)}: #{$color};
//                     }
//                     @else {
//                         $color: fnColor.shade($color-value, $value);
//                         // $color: fnColor.rgb-to-hex($color);
//                         --#{prefix.$prefix}#{$color-name}-#{$mode}-#{string.slice(#{$value}, 1, -2)}: #{$color};
//                     }

//                 }
//             }
//         }
//     }
// }
