// * ------------- @osw3/symfony-ux/assets/sass/builder/button.scss ------------
// *
// *    Builder for Button component
// *
// * ---------------------------------------------------------------------------

@use "sass:map";
@use "sass:meta";
@use './../builders/banner';
@use './../storages/prefix';
@use './../mixins/component';
@use './../mixins/spacing';
@use './../mixins/support';
@use './../mixins/transition';

@use './../storages/button' as store;
@use './../components/button';
@include banner.header('Component Button');
$prefix: prefix.$prefix;



@function palette-declination($palette, $property) {

    @if 'button-color' == map.get($property, name) {
        @return var(--#{$prefix}#{map.get( $palette, name )}-bw-contrast);
    }
    @else if 'button-hover-color' == map.get($property, name) {
        @return var(--#{$prefix}#{map.get( $palette, name )}-bw-contrast);
    }
    @else if 'button-hover-bg-color' == map.get($property, name) {
        @return var(--#{$prefix}#{map.get( $palette, name )}-emphasis);
    }
    @else if 'button-hover-border-color' == map.get($property, name) {
        @return var(--#{$prefix}#{map.get( $palette, name )}-emphasis);
    }

    @return null;
};



// * Component Structure
// * ---------------------------------------------

.#{$prefix}button {

    // Set layout css variables
    // --

    @each $name, $value in button.$layout-properties {
        --#{$prefix}#{$name}: #{$value};
    }


    // Default state
    // --

    display         : inline-block;
    background-color: var(--#{$prefix}button-bg-color);
    border          : store.$border-width solid var(--#{$prefix}button-border-color);
    border-radius   : store.$border-radius;
    color           : var(--#{$prefix}button-color);

    @if store.$font-family {
        font-family: store.$font-family;
    }
    font-size       : var(--#{$prefix}button-font-size);
    font-weight     : var(--#{$prefix}button-font-weight);
    line-height     : var(--#{$prefix}button-line-height);
    text-align      : center;
    text-decoration : none;
    vertical-align  : middle;

    @if store.$cursor {
        cursor: store.$cursor;
    }

    @include transition.set(
        (color, background-color, border-color, box-shadow),
        var(--#{$prefix}transition-normal),
        ease-in-out
    );

    @include spacing.inner( 
        var(--#{$prefix}button-padding-x),
        var(--#{$prefix}button-padding-y),
        var(--#{$prefix}button-padding-x),
        var(--#{$prefix}button-padding-y),
    );
    @include support.prefix('user-select', none, (webkit, moz));

    
    // hover state
    // --

    &:hover {
        color           : var(--#{$prefix}button-hover-color);
        background-color: var(--#{$prefix}button-hover-bg-color);
        border-color    : var(--#{$prefix}button-hover-border-color);
    }

    
    // active state
    // --

    &.active, &:active {
    }

    
    // Focus state
    // --

    &.focus, &:focus, &:focus-visible {
        outline-color: rgb(198, 3, 100);
        outline-style: solid;
        outline-width: 4px;
    }

    
    // Disabled state
    // --

    &[disabled] {
        cursor          : default;
        opacity         : store.$disabled-opacity;
        
        // force the disabled button to not change colors on mouseover
        color           : var(--#{$prefix}button-color);
        background-color: var(--#{$prefix}button-bg-color);
        border-color    : var(--#{$prefix}button-border-color);
    }

    &-no-border {
        border: none !important;
    }

    &-outline,&-outline[disabled] {
        border-style: solid;
        border-width: 2px;
        color: var(--#{$prefix}button-bg-color);
        border-color: var(--#{$prefix}button-bg-color);
        background-color: transparent;
    }

    
    // Sizes declinations
    // --

    &-small {
        --#{$prefix}button-padding-x  : var(--#{$prefix}button-small-padding-x);
        --#{$prefix}button-padding-y  : var(--#{$prefix}button-small-padding-y);
        --#{$prefix}button-font-size  : var(--#{$prefix}button-small-font-size);
        --#{$prefix}button-font-weight: var(--#{$prefix}button-small-font-weight);
        --#{$prefix}button-line-height: var(--#{$prefix}button-small-line-height);
    }
    &-large {
        --#{$prefix}button-padding-x  : var(--#{$prefix}button-large-padding-x);
        --#{$prefix}button-padding-y  : var(--#{$prefix}button-large-padding-y);
        --#{$prefix}button-font-size  : var(--#{$prefix}button-large-font-size);
        --#{$prefix}button-font-weight: var(--#{$prefix}button-large-font-weight);
        --#{$prefix}button-line-height: var(--#{$prefix}button-large-line-height);
    }

    &-block {
        display: block;
        min-width: 100%;
    }

    
    // Palette declinations
    // --

    @include component.palette-declination( 
        meta.get-function(palette-declination), 
        button.$theme-properties
    );
}