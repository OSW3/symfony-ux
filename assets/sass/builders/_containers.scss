// * ---------- @osw3/symfony-ux/assets/sass/builders/containers.scss ----------
// *
// *    Builder for CSS containers & breakpoints
// *
// * ---------------------------------------------------------------------------

@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use './../builders/banner';
@use './../storages/prefix';
@use './../storages/breakpoints' as store;
@use './../abstracts/functions/collection' as f-collection;

@include banner.header('Containers');


// * Retrieve stored data
// * ---------------------------------------------

$breakpoints: store.$breakpoints;
$containers : store.$containers;
$useless    : store.$useless;


// * Unset useless breakpoints
// * ---------------------------------------------

@if f-collection.notEmpty($useless) {
    @each $key, $value in $breakpoints {
        @if f-collection.keyExists($useless, $key) {
            $breakpoints: f-collection.unset($breakpoints, $key);
        }
    }
    @each $key, $value in $containers {
        @if f-collection.keyExists($useless, $key) {
            $containers: f-collection.unset($containers, $key);
        }
    }
}


// * Prepare 
// * ---------------------------------------------

// * Build the $containers-list, an array how contain names of containers
$containers-list: ('container', 'container-fluid');

@each $key, $container in $containers {
  $containers-list: list.append($containers-list, container-#{$key});
}


// * Build the $container-string, a string based on containers names
$containers-string : '';

@each $_selector in $containers-list {
    $containers-string: $containers-string + '.#{prefix.$prefix}#{$_selector}, ';
}

$containers-string: string.unquote(string.slice($containers-string, 1, -3));


// * Build CSS
// * ---------------------------------------------

// * All containers / Common definitions
// * --

#{$containers-string} {
    
    display: block;
    position: relative;
    width: 100%;
    margin-right: auto;
    margin-left: auto;
    z-index: 1;
    
    // todo: add padding left / right
    // $padding: map.get($_SPACERS, 3);
    // @include spaces.padding-x($padding);
}


// * Containers max width
// * --

.#{prefix.$prefix}container- {
    @each $key, $value in $containers {
        &#{$key} {
            max-width: map.get($containers, $key);
        }
    }
}


// * Responsive containers / Media queries
// * --

@each $key, $value in $breakpoints {
//   @if $value > 0 {

    $container-list : (container);
    @media (min-width: $value) {

        $selectors: '';
        $container-list: f-collection.reverse($container-list);

        @each $container in $container-list {
            $selectors: $selectors + '.#{prefix.$prefix}#{$container}, ';
        }
        $selectors: string.unquote(string.slice($selectors, 1, -3));

        #{$selectors} { 
            max-width: map.get($containers, $key);
        }
    }
}
