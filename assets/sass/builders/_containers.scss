// * ---------- @osw3/symfony-ux/assets/sass/builders/containers.scss ----------
// *
// *    Builder for CSS containers & breakpoints
// *
// * ---------------------------------------------------------------------------

@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use './../builders/banner';
@use './../storages/prefix';
@use './../storages/spaces' as stored-spaces;
@use './../storages/breakpoints' as store;
@use './../functions/collection' as fnCollection;
@use './../mixins/size';
@use './../mixins/spacing';
@include banner.header('Containers');
$prefix: prefix.$prefix;


// * Retrieve stored data
// * ---------------------------------------------

$breakpoints: store.$breakpoints;
$containers : store.$containers;
$useless    : store.$useless;


// * Unset useless breakpoints
// * ---------------------------------------------

@if fnCollection.notEmpty($useless) {
    @each $key, $value in $breakpoints {
        @if fnCollection.keyExists($useless, $key) {
            $breakpoints: fnCollection.unset($breakpoints, $key);
        }
    }
    @each $key, $value in $containers {
        @if fnCollection.keyExists($useless, $key) {
            $containers: fnCollection.unset($containers, $key);
        }
    }
}


// * Prepare 
// * ---------------------------------------------

// * Build the $containers-list, an array how contain names of containers
$containers-list: ('container', 'container-fluid');

@each $key, $container in $containers {
  $containers-list: list.append($containers-list, container-#{$key});
}


// * Build the $container-string, a string based on containers names
$containers-string : '';

@each $_selector in $containers-list {
    $containers-string: $containers-string + '.#{$prefix}#{$_selector}, ';
}

$containers-string: string.unquote(string.slice($containers-string, 1, -3));


// * Build CSS
// * ---------------------------------------------

// * All containers / Common definitions
// * --

#{$containers-string} {
    display: block;
    position: relative;
    @include size.width(100%);
    @include spacing.outer-x(auto);
    @include spacing.inner-x(map.get(stored-spaces.$spaces, 3));
    z-index: 1;
}


// * Containers max width
// * --

.#{$prefix}container {

    // Containers by breakpoints
    @each $key, $value in $containers {
        &-#{$key} {
            @include size.width(null, null, map.get($containers, $key));
        }
    }

    // Responsive containers
    @each $key, $value in $breakpoints {
        @media (min-width: $value) {
            @include size.width(null, null, map.get($containers, $key));
        }
    }
}
