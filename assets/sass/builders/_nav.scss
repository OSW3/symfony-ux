// * -------------- @osw3/symfony-ux/assets/sass/builder/nav.scss -------------
// *
// *    Builder for Nav component
// *
// * ---------------------------------------------------------------------------

@use 'sass:map';
@use './../mixins/flex';
@use './../mixins/spacing';
@use './../builders/banner';
@use './../storages/prefix';
@use './../mixins/position';
@use './../mixins/transition';
@use './../variables/alignments';
@use './../storages/breakpoints';
@use './../storages/nav' as store;
@use './../components/nav';

@include banner.header('Component Nav');
$prefix: prefix.$prefix;
$breakpoints: breakpoints.$breakpoints;


// * Component Structure
// * ---------------------------------------------

.#{$prefix}nav {

    // Set layout css variables
    // --

    @each $name, $value in nav.$layout-properties {
        --#{$prefix}#{$name}: #{$value};
    }

    // Nav container
    // --
    // div.nav 

    background-color: var(--#{$prefix}nav-bg-color);
    @include spacing.inner(0);
    @include spacing.outer(0);
    // overflow: hidden;
    // position: relative; 


    // Nav Items (ul)
    // --
    // div.nav > ul.nav-items

    &-items {
        list-style: none;
        @include flex.display;
        @include flex.direction(row);
        @include spacing.inner(0);
        @include spacing.outer(0);

        white-space: nowrap;
        // overflow: hidden; 
    }


    // Vertical Nav
    // --
    // div.nav.nav-vertical > ul.nav-items

    &-vertical &-items { 
        @include flex.direction(column, true);
    }


    // Nav Items alignments
    // --
    // div.nav.nav-fill > ul.nav-items
    // div.nav.nav-center > ul.nav-items
    // div.nav.nav-end > ul.nav-items ...
    @each $name, $value in alignments.$flex-alignments {
        &-#{$name} &-items {
            @include flex.justify-content($value, true);
        }
    }
    &-fill &-item {
        @include flex.grow(1);
    }

    
    // Nav Item (li)
    // --
    // div.nav > ul.nav-items > li.nav-item

    &-item {
        @include position.relative;
        @include spacing.outer(0);

        // &:hover > .#{$prefix}nav-link {
        //     background-color: var(--#{$prefix}nav-item-hover-bg-color);
        //     color: var(--#{$prefix}nav-item-hover-color);
        // }
    }


    
    // Link
    // --
    // div.nav > ul.nav-items > li.nav-item > a.nav-link
    // div.nav > ul.nav-items > li.nav-item > span.nav-link

    &-link {
        cursor: store.$cursor;
        @include flex.display;
        @include flex.direction(row);
        background-color: var(--#{$prefix}nav-item-bg-color);
        color: var(--#{$prefix}nav-item-color);
        white-space: nowrap;
        z-index: 1;

        @include spacing.inner( 
            var(--#{$prefix}nav-item-padding-x),
            var(--#{$prefix}nav-item-padding-y),
            var(--#{$prefix}nav-item-padding-x),
            var(--#{$prefix}nav-item-padding-y),
        );

        @if store.$transition {
            @include transition.set(
                (color, background-color),
                var(--#{$prefix}transition-normal),
                ease-in-out
            );
        }

        // Link mouse over
        &:focus,
        &:hover {
            background-color: var(--#{$prefix}nav-item-hover-bg-color);
            color: var(--#{$prefix}nav-item-hover-color);
        }

        // Link active
        &.active,
        &:active,
        &.active:hover,
        &:active:hover {
            background-color: var(--#{$prefix}nav-item-active-bg-color);
            color: var(--#{$prefix}nav-item-active-color);
            // pointer-events: none;
        }
    }

    // Link content centered when nav alignment is 'fill'
    &-fill &-link {
        @include flex.justify-content(center);
    }
    
    // Disabled link
    // --
    // div.nav > ul.nav-items > li.nav-item > a.nav-link[disabled]
    // div.nav > ul.nav-items > li.nav-item > span.nav-link[disabled]

    &-item[disabled], &-item[inert],
    &-item[disabled] &-link:hover, &-item[inert] &-link:hover {
        cursor: default;
        opacity: store.$disabled-opacity;
        pointer-events: none;
    }


    
    // Sub Nav (ul)
    // --
    // div.nav > ul.nav-items > li.nav-item.has-subnav > ul.nav-items

    .#{$prefix}has-subnav > &-items {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        height: fit-content;
        width: store.$sub-width;
        min-width: store.$sub-min-width;
        background-color: var(--#{$prefix}nav-sub-bg-color);
        z-index: 2;

        @if store.$transition {
            @include transition.set(
                (color, background-color),
                var(--#{$prefix}transition-normal),
                ease-in-out
            );
        }

        // Change subnav states on subnav mouse over
        &:hover {
            background-color: var(--#{$prefix}nav-sub-hover-bg-color);
        }
    }

    // Sub nav link (li > a)
    // --
    // div.nav > ul.nav-items > li.nav-item.has-subnav > ul.nav-items > li.nav-item > a.nav-link

    .#{$prefix}has-subnav > &-items &-link {
        background-color: var(--#{$prefix}nav-sub-item-bg-color);
        color: var(--#{$prefix}nav-sub-item-color);

        // Subnav Link mouse over
        &:focus,
        &:hover {
            background-color: var(--#{$prefix}nav-sub-item-hover-bg-color);
            color: var(--#{$prefix}nav-sub-item-hover-color);
        }

        // Subnav Link active
        &.active,
        &:active,
        &.active:hover,
        &:active:hover {
            background-color: var(--#{$prefix}nav-sub-item-active-bg-color);
            color: var(--#{$prefix}nav-sub-item-active-color);
        }
    }


    // Sub Nav States
    // --

    // Opening state
    .#{$prefix}has-subnav:hover > &-items {
        display: block;
    }

    // Opening placement
    [data-placement=top] > &-items {
        top: auto;
        bottom: 100%;
    }
    [data-placement=right] > &-items {
        top: 0;
        right: auto;
        left: 100%;
    }
    [data-placement=bottom] > &-items {
        top: 100%;
        bottom: 0;
    }
    [data-placement=left] > &-items {
        top: 0;
        right: 100%;
        left: auto;
    }

    // Opening alignment
    [data-alignment=right] > &-items {
        left: auto;
        right: 0;
    }
    [data-alignment=left] > &-items {
        left: 0;
        right: auto;
    }

    // Sub nav symbole
    .#{$prefix}has-subnav > &-link::after {
        margin-left: .5rem;
    }
    [data-placement=top] > &-link::after {
        content: "\25B4";
    }
    [data-placement=right] > &-link::after {
        content: "\25B8";
    }
    [data-placement=bottom] > &-link::after {
        content: "\25BE";
    }
    [data-placement=left] > &-link {
        // @include flex.direction(row-reverse);
        &::before {
            content: "\25C2";
            // margin-left: 0;
            // margin-right: .5rem;
            margin-left: calc(var(--ui-nav-item-padding-x) - .5rem);            
            position: absolute;
            left: 0;
        }
    }

    &:not(&-fill) .#{$prefix}has-subnav > &-items > .#{$prefix}has-subnav > &-link::after {
        margin-left: auto;
    }

    &-item:hover > .#{$prefix}nav-link {
        background-color: var(--#{$prefix}nav-item-hover-bg-color);
        color: var(--#{$prefix}nav-item-hover-color);
    }



    @each $key, $value in $breakpoints {
        @media (max-width: map.get($breakpoints, $key)) {
            &-#{$key} &-items { 
                @include flex.direction(column);
            }
            &-#{$key} .#{$prefix}has-subnav > &-items {
                top: 100%;
                right: auto;
                bottom: 0;
                left: 0;
            }

            &-#{$key} .#{$prefix}has-subnav > &-link::after {
                content: "\25BE";
                margin-left: auto;

            }
            &-#{$key} .#{$prefix}has-subnav > &-link::before {
                content: "";
                display: none;
            }
        }
    }
}