// * ------------- @osw3/symfony-ux/assets/sass/builders/grid.scss -------------
// *
// *    Builder for CSS Grid
// *
// * ---------------------------------------------------------------------------

@use "sass:math";
@use "sass:map";
@use './../mixins/flex';
@use './../mixins/size';
@use './../storages/grid' as store;
@use './../mixins/spacing';
@use './../builders/banner';
@use './../storages/prefix';
@use './../storages/spaces' as stored-spaces;
@use './../storages/breakpoints' as stored-breakpoints;
@include banner.header('Grid & Columns');


// * Retrieve stored data
// * ---------------------------------------------

$divisions: store.$divisions;
$breakpoints: stored-breakpoints.$breakpoints;

$alignments: (
    start  : start,
    center : center,
    end    : end,
    around : space-around,
    between: space-between,
    evenly : space-evenly,
);


// * Grid mixins
// * ---------------------------------------------



// * Build CSS
// * ---------------------------------------------

// * Generate the Grid
// * --

.#{prefix.$prefix}grid {
    @include flex.display;
    @include flex.direction(row);
    @include flex.wrap(wrap);

    // Make grid direct children as wrapped
    & > * {
        @include flex.grow(1);
        @include flex.shrink(0);
        @include flex.basis(0%);
        @include size.width(100%, null, 100%);
        @include spacing.inner-x(var(--#{prefix.$prefix}gap-x, 0));
        @include spacing.outer-y(var(--#{prefix.$prefix}gap-y, 0));
    }
}


// * Grid columns class
// * --

@if store.$enable-grid-columns-class {
    .#{prefix.$prefix}grid {

        $selector-group : '';

        @for $i from 1 through $divisions {
            $selector-group: $selector-group + '&-columns-#{$i}>*, ';
        }

        #{$selector-group} {
            @include flex.grow(0);
            @include flex.shrink(0);
            @include flex.basis(auto);
        }

        @for $i from 1 through $divisions {
            &-columns-#{$i}>* {
                @include size.width(math.percentage(math.div(1,$i)), null, null);
            }
        }
    }
}


// * Grid alignments classes
// * --

@if store.$enable-grid-alignments-class {
    .#{prefix.$prefix}grid {
        @each $name, $value in $alignments {
            &-content-#{$name} {
                @include flex.justify-content($value, true);
            }
        }
    }
}


// * Columns sizes classes
// * --

@if store.$enable-column-sizes-class {
    .#{prefix.$prefix}column {

        $selector-group : '';

        @for $i from 1 through $divisions {
            $selector-group: $selector-group + '&-#{$i}, ';
        }

        #{$selector-group} {
            @include flex.grow(0);
            @include flex.shrink(0);
            @include flex.basis(var(--#{prefix.$prefix}column-width));
            @include size.width(null, null, var(--#{prefix.$prefix}column-width));
        }

        // .column-xx
        @for $i from 1 through $divisions {
            &-#{$i} {
                --#{prefix.$prefix}column-width: #{math.percentage(math.div($i, $divisions))};
            }
        }
    
        // .column-break
        &-break {
            @include flex.basis(100%);
            @include size.height(0);
            @include size.width(100%);
            @include spacing.inner(0, 0, 0, 0, true);
            @include spacing.outer(0, 0, 0, 0, true);
        }


        // Responsive columns
        // --


        $selector-group : '';

        @each $key, $value in $breakpoints {
            @for $i from 1 through $divisions {
                $selector-group: $selector-group + '&-#{$key}-#{$i}, ';
            }
        }

        #{$selector-group} {
            @include flex.grow(0);
            @include flex.shrink(0);
            @include flex.basis(var(--#{prefix.$prefix}column-media-width));
            @include size.width(null, null, var(--#{prefix.$prefix}column-media-width));
        }

        @each $key, $value in $breakpoints {
            @media (min-width: map.get($breakpoints, $key)) {
                @for $i from 1 through $divisions {
                    &-#{$key}-#{$i} {
                        --#{prefix.$prefix}column-media-width: #{math.percentage(math.div($i, $divisions))};

                    }
                }
            }
        }
    }
}


// * Generate Offset classes
// * --

@if store.$enable-column-offset-class {
    .#{prefix.$prefix}offset {
        @for $i from 1 through $divisions {
            &-#{$i} {
                margin-left: math.percentage(math.div($i, $divisions));
            }
        }

        // Responsive offsets
        @each $key, $values in $breakpoints {
            @media (min-width: map.get($breakpoints, $key)) {
                @for $i from 1 through $divisions {
                    &-#{$key}-#{$i} {
                        margin-left: math.percentage(math.div($i, $divisions));
                    }
                }
            }
        }
    }
}


// * Generate Shift classes
// * --

@if store.$enable-column-shift-class {
    .#{prefix.$prefix} {
        &shift {
            margin-right: 100%;
            @for $i from 1 through $divisions {
                &-#{$i} {
                    margin-right: #{math.percentage(1 - math.div($i, $divisions))}; 
                }
            }
        }
    }
}
