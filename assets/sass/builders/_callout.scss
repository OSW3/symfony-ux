// * ------------- @osw3/symfony-ux/assets/sass/builder/callout.scss ------------
// *
// *    Builder for Callout component
// *
// * ---------------------------------------------------------------------------

@use "sass:map";
@use "sass:meta";
@use './../mixins/flex';
@use './../mixins/spacing';
@use './../mixins/support';
@use './../builders/banner';
@use './../storages/prefix';
@use './../mixins/component';
@use './../mixins/transition';

@use './../storages/callout' as store;
@use './../components/callout';
@include banner.header('Component Callout');
$prefix: prefix.$prefix;

@function palette-declination($palette, $property) {

    @if 'callout-color' == map.get($property, name) {
        @return var(--#{$prefix}#{map.get( $palette, name )}-bw-contrast);
    }
    @else if 'callout--bg-color' == map.get($property, name) {
        @return var(--#{$prefix}#{map.get( $palette, name )}-subtle);
    }

    @return null;
};



// * Component Structure
// * ---------------------------------------------

.#{$prefix}callout {
    $parent: &;

    // Set layout css variables
    // --

    @each $name, $value in callout.$layout-properties {
        --#{$prefix}#{$name}: #{$value};
    }


    // Callout layout
    // --

    @include flex.display;
    @include flex.direction(row);
    @include flex.align-items(center);
    @include spacing.inner(var(--#{$prefix}callout-padding-x));
    @include spacing.outer(var(--#{$prefix}callout-padding-y) 0);
    background-color: var(--#{$prefix}callout--bg-color);
    border-left     : store.$border-width solid var(--#{$prefix}callout--border-color);
    border-radius   : store.$border-radius;
    // color           : var(--#{$prefix}callout-color);

    @if store.$font-family {
        font-family: store.$font-family;
    }
    font-size       : var(--#{$prefix}callout-font-size);
    font-weight     : var(--#{$prefix}callout-font-weight);
    line-height     : var(--#{$prefix}callout-line-height);
    
    box-shadow: store.$box-shadow;

    // Content
    // --

    &-icon {
        font-size: 24px;
        margin-right: 10px;
        // margin-left: 0;
    }
    &-message {
        margin: 0 !important
    }

    &-right {
        @include flex.direction(row-reverse);
        border-left: none;
        border-right     : store.$border-width solid var(--#{$prefix}callout--border-color);

        #{$parent}-icon {
            margin-right: 0;
            margin-left: 10px;
        }
    }

    
    // Sizes declinations
    // --

    &-small {
        --#{$prefix}callout-padding-x  : var(--#{$prefix}callout-small-padding-x);
        --#{$prefix}callout-padding-y  : var(--#{$prefix}callout-small-padding-y);
        --#{$prefix}callout-font-size  : var(--#{$prefix}callout-small-font-size);
        --#{$prefix}callout-font-weight: var(--#{$prefix}callout-small-font-weight);
        --#{$prefix}callout-line-height: var(--#{$prefix}callout-small-line-height);
    }
    &-large {
        --#{$prefix}callout-padding-x  : var(--#{$prefix}callout-large-padding-x);
        --#{$prefix}callout-padding-y  : var(--#{$prefix}callout-large-padding-y);
        --#{$prefix}callout-font-size  : var(--#{$prefix}callout-large-font-size);
        --#{$prefix}callout-font-weight: var(--#{$prefix}callout-large-font-weight);
        --#{$prefix}callout-line-height: var(--#{$prefix}callout-large-line-height);
    }

    
    // Palette declinations
    // --
    
    @if store.$enable-palette {
        @include component.palette-declination( 
            meta.get-function(palette-declination), 
            callout.$theme-properties
        );
    }
}