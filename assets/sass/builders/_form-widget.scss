// * ----------- @osw3/symfony-ux/assets/sass/builder/form.scss -----------
// *
// *    Builder for Form component
// *
// * ---------------------------------------------------------------------------

@use './../builders/banner';
@use './../storages/prefix';
@use './../mixins/icon' as iconMixin;
@use './../mixins/corner';
@use './../mixins/flex';
@use './../mixins/spacing';
@use './../mixins/transition';
@use './../functions/utils';

@use './../storages/form-widget' as store;
@use './../components/form' ;
@include banner.header('Component Form Widget');
$prefix: prefix.$prefix;



// * Component Mixin & Functions
// * ---------------------------------------------

@mixin control-border {
    @if store.$control--border-width > 0 {

        border: store.$control--border-width solid var(--#{$prefix}form-widget-control--border-color);

        &:first-child {
            @include corner.start(store.$control--border-radius);
        }
        &:last-child {
            @include corner.end(store.$control--border-radius);
        }
        &:not(:first-child) {
            margin-left: store.$control--border-width * -1;
        }
    }
}

@mixin control-padding {
    @if store.$control--padding-x == store.$control--padding-y {
        @if store.$control--padding-x > 0 {
            @include spacing.inner(store.$control--padding-x);
        }
    } @else {
        @include spacing.inner-x(store.$control--padding-x);
        @include spacing.inner-y(store.$control--padding-y);
    }
}

@mixin transition {
    @if store.$transition {
        @include transition.set(
            (color, background-color, border-color),
            store.$transition-delay,
            store.$transition-type,
        );
    }
}

@mixin spacing-inner($x, $y) {
    @if $x == $y {
        @if $x > 0 {
            @include spacing.inner($x);
        }
    } @else {
        @include spacing.inner-x($x);
        @include spacing.inner-y($y);
    }
}

@mixin theme($color, $bg-color, $border-color: null) {
    color           : $color;
    background-color: $bg-color;
    border-color    : $border-color;
}

// * Component Structure
// * ---------------------------------------------


.#{$prefix}form-widget {

    // Widget layout
    // --

    @include flex.display;
    @include flex.direction(column);
    @include flex.wrap(wrap);
    @include transition;
    @include spacing-inner(
        store.$widget--padding-x, 
        store.$widget--padding-y
    );
    @include theme(
        var(--#{$prefix}form-widget--color),
        var(--#{$prefix}form-widget--bg-color),
        var(--#{$prefix}form-widget--border-color)
    );
    @if store.$widget--border-width > 0 {
        border-width: store.$widget--border-width;
        border-style: solid;
    }
    border-radius: store.$widget--border-radius;


    // Widget label
    &-label {
        @include theme(
            var(--#{$prefix}form-widget-label--color),
            var(--#{$prefix}form-widget-label--bg-color),
        );
        @include spacing-inner(
            store.$label--padding-x, 
            store.$label--padding-y
        );
        border-radius: store.$label--border-radius;

        &-ellipsis {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    }

    // Required symbol
    [data-#{$prefix}widget-required] &-label::after {
        content: store.$required--symbol;
        color: var(--#{$prefix}form-widget--required--color) !important;
        padding-left: .1rem;
    }

    // Widget control
    &-control {
        @include flex.grow(1);
        @include control-padding;
        @include control-border;
        @include transition;
        @include theme(
            var(--#{$prefix}form-widget-control--color),
            var(--#{$prefix}form-widget-control--bg-color),
        );

        // TODO: Disable (label cursor, label color?, group cursor, control color)

        &:focus {
            @include theme(
                var(--#{$prefix}form-widget-control--color--active),
                var(--#{$prefix}form-widget-control--bg-color--active),
                var(--#{$prefix}form-widget-control--border-color--active),
            );
        }

        &:disabled {
            background-color: var(--#{$prefix}form-widget-control--bg-color--disabled);
            border-color: var(--#{$prefix}form-widget-control--border-color--disabled);
            &:not([readonly]) {
                color: var(--#{$prefix}form-widget-control--color--disabled);
            }
        }
    }

    // Widget group
    &-group {
        // border: 5px soli
        @include flex.display;
        @include flex.direction(row);
        @include flex.wrap(wrap);
        @include flex.align-items(stretch);
        @include flex.grow(1);

        &-text,
        & output {
            cursor: pointer;
            @include flex.display;
            @include flex.direction(row);
            @include flex.align-items(center);
            @include control-padding;
            @include control-border;
            @include theme(
                var(--#{$prefix}form-widget-group--color),
                var(--#{$prefix}form-widget-group--bg-color),
            );
        }
    }

    // &-group,
    &-control:not(&-group &-control)  {
        @include control-border;
        @include corner.rounded(store.$control--border-radius);

        &:hover {
            @include theme(
                var(--#{$prefix}form-widget-control--color--hover),
                var(--#{$prefix}form-widget-control--bg-color--hover),
                var(--#{$prefix}form-widget-control--border-color--hover)
            );
        }

        &:focus {
            @include theme(
                var(--#{$prefix}form-widget-control--color--active),
                var(--#{$prefix}form-widget-control--bg-color--active),
                var(--#{$prefix}form-widget-control--border-color--active)
            );
        }
    }

    // Widget description
    &-description {
        // border: 5px solid orange;

        // TODO: adapter la marge selon la variable sizing
        // TODO: utiliser la mixin pour les marges
        margin: .25rem 0 0 0;

        // TODO: adapter la fontsize selon la variable sizing
        font-size: .875em;

        @include theme(
            var(--#{$prefix}form-widget-description--color),
            var(--#{$prefix}form-widget-description--bg-color),
        );
        flex-basis: 100%;
        width: 100%;



        @include spacing-inner(
            store.$description--padding-x, 
            store.$description--padding-y
        );
        border-radius   : store.$description--border-radius;
    }

    

    // Widget Hover
    // --

    &:hover {
        @include theme(
            var(--#{$prefix}form-widget--color--hover),
            var(--#{$prefix}form-widget--bg-color--hover),
            var(--#{$prefix}form-widget--border-color--hover)
        );
    }

    

    // Widget Focus
    // --

    &:has(&-control:focus) {
        @include theme(
            var(--#{$prefix}form-widget--color--active),
            var(--#{$prefix}form-widget--bg-color--active),
            var(--#{$prefix}form-widget--border-color--active)
        );
    }

    

    // Widget Inline
    // --

    $label-margin-right: .5rem;
    &-inline {
        @include flex.direction(row);
        @include flex.align-items(center);
    }
    &-inline &-label {
        margin-bottom: 0;
        margin-right: $label-margin-right;

        @if store.$label--inline-width != auto {
            width: store.$label--inline-width;
        }
    }
    &-inline &-control {
        // // @include flex.grow(1);
    }
    &-inline &-description {
        @if store.$label--inline-width != auto {
            margin-left: utils.px-to-rem(store.$label--inline-width) + $label-margin-right;
        }
    }
    &-inline &-group {
        // // @include flex.direction(row);
        // // @include flex.align-items(center);
        // // @include flex.grow(1);
    }

    

    // Icons
    // --

    &-label > .#{$prefix}icon,
    &-group-text > .#{$prefix}icon,
    &-description > .#{$prefix}icon {
        @include iconMixin.toFontSize;
        @include transition.set(
            (fill, stroke),
            store.$transition-delay,
            store.$transition-type,
        );
    }


    // Widget checkbox / radio Exceptions
    // --

    & [type=checkbox],
    & [type=radio] {
        display: inline-block;
        width: fit-content;
    }


    // Widget color Exceptions
    // --

    &-color &-group {
        width: fit-content;
    }
    &-color &-control {
        width: 4rem;
        height: inherit;
    }
}
