// * ------------ @osw3/symfony-ux/assets/sass/builders/palette.scss -----------
// *
// *    Builder for CSS Palette variables
// *
// * ---------------------------------------------------------------------------

@use "sass:list";
@use "sass:map";
@use './../builders/banner';
@use './../storages/prefix';
@use './../storages/palette' as store;
@use './../functions/color' as fnColor;
@use './../functions/collection' as fnCollection;
// @include banner.header('Palette');


// * Retrieve stored data
// * ---------------------------------------------

$palette: store.$palette;
$useless: store.$useless;
$declinations: store.$declinations;


// * Local mixins
// * ---------------------------------------------

// Generate declination
@mixin declination($palette-name, $base, $rules) {
    @each $declination-name, $declination in $rules{

        $mode : list.nth($declination, 1);
        $value: list.nth($declination, 2);

        @if $mode == tint {
            $color: fnColor.tint($base, $value);
            // $color: fnColor.rgb-to-hex($color);
            --#{prefix.$prefix}#{$palette-name}-#{$declination-name}: #{$color};
        }
        @else {
            $color: fnColor.shade($base, $value);
            // $color: fnColor.rgb-to-hex($color);
            --#{prefix.$prefix}#{$palette-name}-#{$declination-name}: #{$color};
        }
    }
}

// * Unset useless colors
// * ---------------------------------------------

@if fnCollection.notEmpty($useless) {
    @each $key, $value in $palette {
        @if fnCollection.keyExists($useless, $key) {
            $palette: fnCollection.unset($palette, $key);
        }
    }
}


// * Build CSS
// * ---------------------------------------------

:root {
    @each $palette-name, $palette-color in $palette {

        // Main color
        // --

        --#{prefix.$prefix}#{$palette-name}: #{$palette-color};


        // Properties declination
        // --

        $hasDeclination: false;

        // Specified declination
        @each $declination-name, $declination-properties in $declinations {
            @if $declination-name == $palette-name {
                @include declination($palette-name, $palette-color, $declination-properties);
                $hasDeclination: true;
            }
        }

        // All declination '*'
        @if $hasDeclination == false {
            $declination-properties: map.get($declinations, '*');
            @include declination($palette-name, $palette-color, $declination-properties);
        }

        --#{prefix.$prefix}#{$palette-name}-bw-contrast: #{fnColor.bwContrast($palette-color)};
    }
}
