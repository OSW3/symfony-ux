// * ------------- @osw3/symfony-ux/assets/sass/builder/brand.scss -------------
// *
// *    Builder for Brand component
// *
// * ---------------------------------------------------------------------------

@use 'sass:map';
@use 'sass:list';
@use './../storages/brand' as store;
@use './../mixins/spacing';
@use './../builders/banner';
@use './../components/brand';
@use './../storages/prefix';
@use './../mixins/transition';
@use './../storages/breakpoints';

@include banner.header('Component Brand');
$prefix: prefix.$prefix;

.#{$prefix}brand {

    display: inline-block;
    text-decoration: none;
    white-space: nowrap;
    height: fit-content;
    font-size : store.$primary-font-size;
    font-weight : store.$primary-font-weight;
    color: var(--#{$prefix}brand--color);
    @if store.$primary-font-family {
        font-family: store.$primary-font-family;
    }

    &-link {
        display: table;
        color: inherit;
        text-decoration: none;
    }

    &-inner {
        display: flex;
        flex-direction: store.$direction;
        background-color: var(--#{$prefix}brand--bg-color);

        @if store.$border-width > 0 {
            border: store.$border-width solid var(--#{$prefix}brand--border-color);
        }
        @if store.$border-radius > 0 {
            border-radius: store.$border-radius;
        }
        @if store.$direction == row {
            align-items: center;
        }
        @include spacing.inner( 
            store.$padding-x,
            store.$padding-y,
            store.$padding-x,
            store.$padding-y,
        );
        @include transition.set(
            (background-color, border-color), 
            store.$transition-delay, 
            store.$transition-type
        );
    }
    
    &-figures {
        // border: 10px solid rgb(3, 132, 188);
    }
    &-figure {
        display: none;
        width: auto;
        height: auto;
        object-fit: contain;
    }
    &-figure-main {
        display: block !important;
    }

    $default-breakpoint: '';
    @each $name in brand.$breakpoints {
        @if map.has-key(breakpoints.$breakpoints, $name) {
            // Default brand breakpoint. Displayed when all media queries ar hidden
            @if $default-breakpoint == '' {
                $default-breakpoint: $name;
                &-figure-#{$name} {
                    display: block;
                }
            }

            // Media query fot Available breakpoints
            @media (min-width: map.get(breakpoints.$breakpoints, $name)) {
                &-figure {
                    display: none;
                }
                &-figure-#{$name} {
                    display: block;
                }
            }
        }
    }
    
    &-text {
        display: none;
    }
    &:not(&-hide-text) &-text {
        display: flex;
        flex-direction: column;
        align-items: store.$justify;
        color: var(--#{$prefix}brand--color);
        @include transition.set(
            (color), 
            store.$transition-delay, 
            store.$transition-type
        );
    }
    &-name {
        display: block;
        font-size: inherit;
        font-weight: inherit;
        color: inherit;
    }
    &-tagline {
        display: block;
        color: inherit;
        font-size: store.$secondary-font-size;
        font-weight: store.$secondary-font-weight;
        @include spacing.outer( 0,0,0,0 );
        @if store.$secondary-font-family {
            font-family: store.$secondary-font-family;
        }
    }
    &-name + &-tagline {
        @include spacing.outer( store.$tagline-offset ,0,0,0 );
    }
    
    &-figures + &-text {
        @if store.$direction == row {
            margin-left: store.$gap;
        }
        @else if store.$direction == row-reverse {
            margin-right: store.$gap;
        }
    }


    /// Brand Sizes
    /// --

    // @each $size, $properties in $sizes {
    //     &-#{$size} {
    //         font-size: map.get($properties, 'font-size');
    //         font-weight: map.get($properties, 'font-weight');
            
    //         .#{$_CLASSNAME}-tagline {
    //             font-size: map.get($properties, 'tagline-size');
    //             font-weight: map.get($properties, 'font-weight');
    //             margin-top: map.get($properties, 'tagline-offset');
    //         }
    //         .#{$_CLASSNAME}-logo {
    //             max-height: map.get($properties, 'img-height');
    //         }
    //     }
    // }
    
    
    &:hover {
        &-link {
            text-decoration: none;
        }
        &-inner {
            background-color: var(--#{$prefix}brand--bg-color--hover);
            border-color: var(--#{$prefix}brand--border-color--hover);
        }
        &-text {
            color: var(--#{$prefix}brand--color--hover);
        }
    }
}
