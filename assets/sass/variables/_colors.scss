// ************************************************************************** //
// *
// *    Colors definition.
// *
// *    - Default colors
// *    - Add colors
// *    - Useless colors
// *
// ************************************************************************** //

@use 'sass:meta';
@use './../generated';
@use './../abstracts/functions/color';
@use './../abstracts/functions/collection';



// * =============================================
// *
// *    Defaults colors
// *
// * =============================================

/// Colors
/// ==============================================

$blue  : if(meta.global-variable-exists('blue', $module: generated), generated.$blue, #0d6efd) !default;
$indigo: if(meta.global-variable-exists('indigo', $module: generated), generated.$indigo, #6610f2) !default;
$purple: if(meta.global-variable-exists('purple', $module: generated), generated.$purple, #6f42c1) !default;
$pink  : if(meta.global-variable-exists('pink', $module: generated), generated.$pink, #d63384) !default;
$red   : if(meta.global-variable-exists('red', $module: generated), generated.$red, #dc3545) !default;
$orange: if(meta.global-variable-exists('orange', $module: generated), generated.$orange, #fd7e14) !default;
$yellow: if(meta.global-variable-exists('yellow', $module: generated), generated.$yellow, #ffc107) !default;
$green : if(meta.global-variable-exists('green', $module: generated), generated.$green, #198754) !default;
$teal  : if(meta.global-variable-exists('teal', $module: generated), generated.$teal, #20c997) !default;
$cyan  : if(meta.global-variable-exists('cyan', $module: generated), generated.$cyan, #0dcaf0) !default;


/// Black & White & Gray scales
/// ==============================================

$black   : if(meta.global-variable-exists('black', $module: generated), generated.$black, #111111) !default;
$white   : if(meta.global-variable-exists('white', $module: generated), generated.$white, #ffffff) !default;
$gray-100: if(meta.global-variable-exists('gray-100', $module: generated), generated.$gray-100, #f8f9fa) !default;
$gray-200: if(meta.global-variable-exists('gray-200', $module: generated), generated.$gray-200, #e9ecef) !default;
$gray-300: if(meta.global-variable-exists('gray-300', $module: generated), generated.$gray-300, #dee2e6) !default;
$gray-400: if(meta.global-variable-exists('gray-400', $module: generated), generated.$gray-400, #ced4da) !default;
$gray-500: if(meta.global-variable-exists('gray-500', $module: generated), generated.$gray-500, #adb5bd) !default;
$gray-600: if(meta.global-variable-exists('gray-600', $module: generated), generated.$gray-600, #6c757d) !default;
$gray-700: if(meta.global-variable-exists('gray-700', $module: generated), generated.$gray-700, #495057) !default;
$gray-800: if(meta.global-variable-exists('gray-800', $module: generated), generated.$gray-800, #343a40) !default;
$gray-900: if(meta.global-variable-exists('gray-900', $module: generated), generated.$gray-900, #212529) !default;



/// Default colors collection
/// ==============================================

$colors: (
    'blue'    : $blue,
    'indigo'  : $indigo,
    'purple'  : $purple,
    'pink'    : $pink,
    'red'     : $red,
    'orange'  : $orange,
    'yellow'  : $yellow,
    'green'   : $green,
    'teal'    : $teal,
    'cyan'    : $cyan,

    'black'   : $black,
    'white'   : $white,
    'gray-100': $gray-100,
    'gray-200': $gray-200,
    'gray-300': $gray-300,
    'gray-400': $gray-400,
    'gray-500': $gray-500,
    'gray-600': $gray-600,
    'gray-700': $gray-700,
    'gray-800': $gray-800,
    'gray-900': $gray-900,
);



// * =============================================
// *
// *    Additional colors
// *
// * =============================================

/// Add customs colors to the colors
/// -----
/// $additional-colors: ( 'my-color': purple );
$generated-additional-colors: if(meta.global-variable-exists('generated-additional-colors', $module: generated), generated.$generated-additional-colors, ()) !default;
$additional-colors          : () !default;
$additional-colors          : map-merge(
    $generated-additional-colors, 
    $additional-colors
);

@if collection.notEmpty($additional-colors) {
    @each $key, $value in $additional-colors {
        $colors: map-merge($colors, ($key: $value));
    }
}



// * =============================================
// *
// *    Colors declination
// *
// * =============================================

$generated-colors-shades: if(meta.global-variable-exists('generated-colors-shades', $module: generated), generated.$generated-colors-shades, ()) !default;
$colors-shades          : () !default;
$colors-shades          : map-merge(
    $generated-colors-shades, 
    $colors-shades
);

$generated-colors-tints: if(meta.global-variable-exists('generated-colors-tints', $module: generated), generated.$generated-colors-tints, ()) !default;
$colors-tints          : () !default;
$colors-tints          : map-merge(
    $generated-colors-tints, 
    $colors-tints
);



// * =============================================
// *
// *    Useless colors
// *
// * =============================================

/// Remove from colors
/// -----
/// $useless-colors: ('success');
$generated-useless-colors: if(meta.global-variable-exists('generated-useless-colors', $module: generated), generated.$generated-useless-colors, ()) !default;
$useless-colors          : () !default;
$useless-colors          : append($generated-useless-colors, $useless-colors, 'comma');

@if collection.notEmpty($useless-colors) {
    @each $key, $value in $colors {
        @if collection.keyExists($useless-colors, $key) {
            $colors: collection.unset($colors, $key);
        }
    }
}