// ************************************************************************** //
// *
// *    Grid builder
// *
// ************************************************************************** //

@use "sass:map";
@use "sass:math";
@use './../variables/prefix';
@use './../variables/grid';
@use './../abstracts/mixins/flex';
@use './../abstracts/mixins/clear';
@use './../abstracts/mixins/banner';
@use './../abstracts/mixins/spaces';

prefix.$prefix: prefix.$prefix;

$grid-divisions: grid.$grid-divisions;

@include banner.header('Grid & Columns');


/// Grid utils
/// =============================================

@mixin make-column($columns) 
{
    flex: 0 0 percentage(math.div($columns, $grid-divisions));
    max-width: percentage(math.div($columns, $grid-divisions));
}
@mixin make-break($columns) 
{
    // flex: 0 0 percentage(math.div($columns, $grid-divisions));
    margin-right: 100% - (percentage(math.div($columns, $grid-divisions)));
}
@mixin make-offset($columns) 
{
  margin-left: percentage(math.div($columns, $grid-divisions));
}



/// The Grid 
/// =============================================
@include banner.section('The grid');

// Set .grid styles definition
.#{prefix.$prefix}grid {
    flex-wrap: wrap;
    
    @include flex.row;
    @include clear.both;

    // Make grid direct children as wrapped
    & > * {
        flex-shrink: 0;
        width: 100%;
        max-width: 100%;
    }

    // Grid alignment
    @each $_position in (center, start, end) {
        &-#{$_position} {
            justify-content: #{$_position} !important;
        }
    }
}



/// Gaps
/// =============================================
@include banner.section('Grid gaps');

@each $i, $spacer in $_SPACERS 
{
    $margin: calc(-1 * $spacer);
    $padding: $spacer;

    @if $i != 'auto' {

        // Padding gap for the Grid
        // .#{prefix.$prefix}grid.#{prefix.$prefix}gap-#{$i}
        // {
        //     @include spaces.margin(null, $margin, null, $margin);
        // }

        // (All) Padding gap for thr grid Columns
        .#{prefix.$prefix}gap-#{$i} [class^="#{prefix.$prefix}column"]
        {
            @if $i == 0 {
                @include spaces.padding($padding !important, $padding !important, $padding !important, $padding !important);
            } @else {
                @include spaces.padding($padding, $padding, $padding, $padding);
            }
                }
        // (Left & right) Padding gap for thr grid Columns
        .#{prefix.$prefix}gap-x-#{$i} [class^="#{prefix.$prefix}column"]{
            @include spaces.padding-x($padding);
        }
        // (Top & Bottom) Padding gap for thr grid Columns
        .#{prefix.$prefix}gap-y-#{$i} [class^="#{prefix.$prefix}column"]{
            @include spaces.padding-y($padding);
        }
    
    }
}



/// Columns
/// =============================================
@include banner.section('The grid columns');

// Set .column & .column-x styles definition
.#{prefix.$prefix}column {
    flex: 1 0 0%;

    // .column-break
    &-break {
        flex-basis: 100%;
        height: 0;
        margin: 0 !important;
        padding: 0 !important;
    }

    // column-x
    @for $i from 1 through $grid-divisions {
        &-#{$i} {
            @include make-column($i);
        }
    }

    // Responsive columns
    @each $size, $breakpoint in $breakpoints {
        @if $breakpoint > 0 {
            @media (min-width: map.get($breakpoints, $size)) {
                @for $i from 1 through $grid-divisions {
                    &-#{$size}-#{$i} {
                        @include make-column($i);
                    }
                }
            }
        }
    }
}



/// Offsets
/// =============================================
@include banner.section('The grid offsets');

.#{prefix.$prefix}offset {

    // .offset-x
    @for $i from 1 through $grid-divisions {
        &-#{$i} {
            @include make-offset($i);
        }
    }

    // Responsive offsets
    @each $size, $breakpoint in $breakpoints {
        @if $breakpoint > 0 {
            @media (min-width: map.get($breakpoints, $size)) {
                @for $i from 1 through $grid-divisions {
                    &-#{$size}-#{$i} {
                        @include make-offset($i);
                    }
                }
            }
        }
    }
}