// * ------------- @osw3/symfony-ux/assets/sass/storages/brand.scss ------------
// *
// *    Brand Storage
// *
// * ---------------------------------------------------------------------------

@use 'sass:list';
@use './../storages/breakpoints';
@use './../storages/fonts';
@use './../storages/prefix';
@use './../storages/spaces';

@use './../functions/collection' as fnCollection;


// * Define storage data
// * ---------------------------------------------

$breakpoints: ();
@each $name, $value in breakpoints.$breakpoints {
    $breakpoints: list.append($breakpoints, $name) !global;
}

$primary-font-family  : null;
$primary-font-size    : fonts.$scale-base * 1.5;
$primary-font-weight  : 100 * 6;
$secondary-font-family: null;
$secondary-font-size  : fonts.$scale-base * .8;
$secondary-font-weight: 100 * 4;

$padding-x            : spaces.$base * .6;
$padding-y            : spaces.$base * .8;


$transition           : false;
$transition-delay     : var(--#{prefix.$prefix}transition-normal);
$transition-type      : ease-in-out;

$tagline-offset       : (spaces.$base * .5) * -1;


// * Storage Mixins definition
// * ---------------------------------------------

@mixin setBreakpoints($list) {
    $breakpoints: $list !global;
}

@mixin setUselessBreakpoints($useless) {
    @each $key, $value in $breakpoints {
        @if fnCollection.keyExists($useless, $key) {
            $breakpoints: fnCollection.unset($breakpoints, $key) !global;
        }
    }
}

@mixin setPaddingX($value) {
    $padding-x: $value !global;
}
@mixin setPaddingY($value) {
    $padding-y: $value !global;
}

@mixin setPrimaryFontFamily($value) {
    $primary-font-family: $value !global;
}
@mixin setPrimaryFontSize($value) {
    $primary-font-size: $value !global;
}
@mixin setPrimaryFontWeight($value) {
    $primary-font-weight: $value !global;
}
@mixin setSecondaryFontFamily($value) {
    $secondary-font-family: $value !global;
}
@mixin setSecondaryFontSize($value) {
    $secondary-font-size: $value !global;
}
@mixin setSecondaryFontWeight($value) {
    $secondary-font-weight: $value !global;
}

@mixin setTransition($value) {
    $transition: $value !global;

    // @if $transition and $transition-delay == null {
    //     $transition-delay : var(--#{prefix.$prefix}transition-normal) !global;
    // }
    // @if $transition and $transition-type == null {
    //     $transition-type  : ease-in-out !global;
    // }
}
@mixin setTransitionDelay($value) {
    $transition-delay: $value !global;
}
@mixin setTransitionType($value) {
    $transition-type: $value !global;
}

@mixin setTaglineOffset($value) {
    $tagline-offset: $value !global;
}
