// * ------------- @osw3/symfony-ux/assets/sass/storages/brand.scss ------------
// *
// *    Brand Storage
// *
// * ---------------------------------------------------------------------------

@use 'sass:list';
@use './../storages/breakpoints';
@use './../storages/fonts';
@use './../storages/prefix';
@use './../storages/spaces';

@use './../functions/collection' as fnCollection;


// * Define storage data
// * ---------------------------------------------

$breakpoints: ();
@each $name, $value in breakpoints.$breakpoints {
    $breakpoints: list.append($breakpoints, $name) !global;
}

$primary-font-family  : null;
$primary-font-size    : fonts.$scale-base * 1.5;
$primary-font-weight  : 100 * 6;
$secondary-font-family: null;
$secondary-font-size  : fonts.$scale-base * .8;
$secondary-font-weight: 100 * 4;

$padding-x            : spaces.$base * .6;
$padding-y            : spaces.$base * .8;


$transition           : false;
$transition-delay     : var(--#{prefix.$prefix}transition-normal);
$transition-type      : ease-in-out;

$tagline-offset       : (spaces.$base * .5) * -1;


// * Storage Mixins definition
// * ---------------------------------------------

// Sets the breakpoints for responsive design specific to the brand.
// @param {List} $breakpoints - A list of breakpoints, e.g., (laptop, desktop).
@mixin setBreakpoints($breakpoints) {
    $breakpoints: $breakpoints !global;
}

// Sets the breakpoints considered unnecessary for responsive design.
// @param {List} $breakpoints - A list of breakpoints, e.g., (laptop, desktop).
@mixin setUselessBreakpoints($useless) {
    @each $key, $value in $breakpoints {
        @if fnCollection.keyExists($useless, $key) {
            $breakpoints: fnCollection.unset($breakpoints, $key) !global;
        }
    }
}

// Sets the horizontal padding for the brand's elements.
// @param {Length} $padding - The horizontal padding value.
@mixin setPaddingX($value) {
    $padding-x: $value !global;
}

// Sets the vertical padding for the brand's elements.
// @param {Length} $padding - The vertical padding value.
@mixin setPaddingY($value) {
    $padding-y: $value !global;
}

// Sets the primary font family for the brand. If null, defaults to the system or inherited font.
// @param {String|Null} $family - The primary font family or null to inherit.
@mixin setPrimaryFontFamily($family) {
    $primary-font-family: $family !global;
}

// Sets the primary font size for the brand.
// @param {Length} $size - The size of the primary font.
@mixin setPrimaryFontSize($size) {
    $primary-font-size: $size !global;
}

// Sets the primary font weight for the brand.
// @param {Number} $weight - The weight of the primary font.
@mixin setPrimaryFontWeight($weight) {
    $primary-font-weight: $weight !global;
}

// Sets the secondary font family for the brand. If null, defaults to the system or inherited font.
// @param {String|Null} $family - The secondary font family or null to inherit.
@mixin setSecondaryFontFamily($family) {
    $secondary-font-family: $family !global;
}

// Sets the secondary font size for the brand.
// @param {Length} $size - The size of the secondary font.
@mixin setSecondaryFontSize($size) {
    $secondary-font-size: $size !global;
}

// Sets the secondary font weight for the brand.
// @param {Number} $weight - The weight of the secondary font.
@mixin setSecondaryFontWeight($weight) {
    $secondary-font-weight: $weight !global;
}

// Enables or disables transitions for the brand's elements.
// @param {Boolean} $enabled - Whether to enable (`true`) or disable (`false`) transitions.
@mixin setTransition($enabled) {
    $transition: $enabled !global;

    // @if $transition and $transition-delay == null {
    //     $transition-delay : var(--#{prefix.$prefix}transition-normal) !global;
    // }
    // @if $transition and $transition-type == null {
    //     $transition-type  : ease-in-out !global;
    // }
}

// Sets the transition delay for the brand's elements.
// @param {Length} $delay - The duration of the transition delay, typically a CSS variable.
@mixin setTransitionDelay($delay) {
    $transition-delay: $delay !global;
}

// Sets the transition type (easing function) for the brand's elements.
// @param {String} $type - The type of easing, e.g., `ease-in-out`.
@mixin setTransitionType($type) {
    $transition-type: $type !global;
}

// Sets the offset for the brand's tagline, allowing for precise alignment.
// @param {Length} $offset - The offset value, typically negative for upward positioning.
@mixin setTaglineOffset($offset) {
    $tagline-offset: $offset !global;
}
