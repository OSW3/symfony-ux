// * ---------- @osw3/symfony-ux/assets/sass/storages/breakpoints.scss ---------
// *
// *    Breakpoints Storage
// *
// * ---------------------------------------------------------------------------

@use "sass:list";
@use "sass:map";
@use "sass:string";
@use './../variables/breakpoints' as default;


// * Define storage data
// * ---------------------------------------------

// * Breakpoints collection
$breakpoints: (
    default.$breakpoint-name-phone  : default.$breakpoint-phone,
    default.$breakpoint-name-tablet : default.$breakpoint-tablet,
    default.$breakpoint-name-laptop : default.$breakpoint-laptop,
    default.$breakpoint-name-desktop: default.$breakpoint-desktop,
    default.$breakpoint-name-wide   : default.$breakpoint-wide,
    default.$breakpoint-name-ultra  : default.$breakpoint-ultra,
);


// * Containers width collection
$containers: (
    default.$breakpoint-name-phone  : default.$container-phone,
    default.$breakpoint-name-tablet : default.$container-tablet,
    default.$breakpoint-name-laptop : default.$container-laptop,
    default.$breakpoint-name-desktop: default.$container-desktop,
    default.$breakpoint-name-wide   : default.$container-wide,
    default.$breakpoint-name-ultra  : default.$container-ultra,
);

// * Useless breakpoints collection
$useless: ();


// * Storage Mixins definition
// * ---------------------------------------------

@mixin add($new-breakpoints) {
    @each $key, $value in $new-breakpoints {
        $additional-breakpoint-value: map.get($value, 'breakpoint');
        $additional-container-value: map.get($value, 'container');

        @if $additional-breakpoint-value {
            $breakpoints: map.merge($breakpoints, ($key: $additional-breakpoint-value)) !global;
        }
        @if $additional-container-value {
            $containers: map.merge($containers, ($key: $additional-container-value)) !global;
        }
    }
}

@mixin replace-names($replacements) {
    $new-breakpoints: ();
    $new-containers: ();
  
    @each $key, $value in $breakpoints {
        $new-key: if(map.has-key($replacements, $key), map.get($replacements, $key), $key);
        $new-breakpoints: map.merge($new-breakpoints, ($new-key: $value));
    }
  
    @each $key, $value in $containers {
        $new-key: if(map.has-key($replacements, $key), map.get($replacements, $key), $key);
        $new-containers: map.merge($new-containers, ($new-key: $value));
    }
  
    $breakpoints: $new-breakpoints !global;
    $containers: $new-containers !global;
}

@mixin replace-breakpoints-values($replacements) {
    @each $replacement-key, $replacement-value in $replacements {
        @each $breakpoint-key, $breakpoint-value in $breakpoints {
            @if $replacement-key == $breakpoint-key {
                $breakpoints: map.merge($breakpoints, ($breakpoint-key: $replacement-value)) !global;
            }
        }
    }
}

@mixin replace-containers-values($replacements) {
    @each $replacement-key, $replacement-value in $replacements {
        @each $container-key, $container-value in $containers {
            @if $replacement-key == $container-key {
                $containers: map.merge($containers, ($container-key: $replacement-value)) !global;
            }
        }
    }
}

@mixin remove($useless-breakpoints) {
    $useless: list.join($useless, $useless-breakpoints, 'comma') !global;
}


// * Additional & Useless breakpoints from generated
// * ---------------------------------------------

@include add(default.$additional);
@include remove(default.$useless);
