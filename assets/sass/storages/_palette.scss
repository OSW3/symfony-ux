// * ------------ @osw3/symfony-ux/assets/sass/storages/palette.scss -----------
// *
// *    Palette Storage
// *
// * ---------------------------------------------------------------------------

@use "sass:list";
@use "sass:map";
@use "sass:string";
@use './../variables/colors';
@use './../variables/palette' as default;

@function last-index($string, $character) {
    $index: null;
    @for $i from 1 through string.length($string) {
      @if string.slice($string, $i, $i) == $character {
        $index: $i;
      }
    }
    @return if($index == null, -1, $index);
}


// * Define storage data
// * ---------------------------------------------

// * UI Colors collection
$palette: (
    default.$ui-color-name-success  : colors.$green,
    default.$ui-color-name-danger   : colors.$red,
    default.$ui-color-name-warning  : colors.$orange,
    default.$ui-color-name-info     : colors.$cyan,
    default.$ui-color-name-primary  : colors.$blue,
    default.$ui-color-name-secondary: colors.$gray-600,
    default.$ui-color-name-light    : colors.$white,
    default.$ui-color-name-dark     : colors.$black,
    default.$ui-color-name-muted    : colors.$gray-500,
) !default;

// * Tints collection
$tints  : () !default;

// * Shades collection
$shades : () !default;

// * Useless UI Colors collection
$useless: () !default;


// * Storage Mixins definition
// * ---------------------------------------------

@mixin add($new-colors) {
    $palette: map.merge($palette, $new-colors) !global;
}

@mixin replace($replacements) {
    $new-palette: ();
  
    @each $key, $value in $palette {
        $suffix: string.slice($key, last-index($key, ".") + 1);
        $new-key: if(map.has-key($replacements, $suffix), map.get($replacements, $suffix), $suffix);
        $new-palette: map.merge($new-palette, ($new-key: $value));
    }
  
    $palette: $new-palette !global;
}
  
@mixin tints($tint-map) {
    $tints: map.merge($tints, $tint-map) !global;
}

@mixin shades($shade-map) {
    $shades: map.merge($shades, $shade-map) !global;
}

@mixin remove($useless-colors) {
    $useless: list.join($useless, $useless-colors, 'comma') !global;
}
