// ************************************************************************** //
// *                                                                        * //
// * Some functions about "color" object.                                   * //
// *                                                                        * //
// * How to import "collection"                                             * //
// *    @use 'functions/color' as color                           * //
// *                                                                        * //
// ************************************************************************** //

@use "sass:color";
@use "sass:string";
@use './utils';


@function tint($color, $percentage) {
  @return color.mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return color.mix(black, $color, $percentage);
}

@function rgb-to-hex($color) {
  $r: color.channel($color, "red", $space: rgb);
  $g: color.channel($color, "green", $space: rgb);
  $b: color.channel($color, "blue", $space: rgb);

  @return "#" + string.slice("00#{$r}", -2) + string.slice("00#{$g}", -2) + string.slice("00#{$b}", -2);
}






/// Slightly lighten a color
/// =============================================
/// 
/// @example color.tint(#FF9900, 20); 
/// 
/// @param {Color} $colorThe original color you need to tint
/// @param {Number} $percentagePercentage level of tint
/// @return {Color}The new tinted color
/// 
// @function tint($color, $percentage) 
// {
//   @return color.mix(white, $color, $percentage);
// }


/// Slightly darken a color
/// =============================================
/// 
/// @example color.shade(#FF9900, 20); 
/// 
/// @param {Color} $color The original color you need to shade
/// @param {Number} $percentage Percentage level of shade
/// @return {Color}The new shaded color
/// 
// @function shade($color, $percentage) 
// {
//   @return color.mix(black, $color, $percentage);
// }

// @function bwContrast($color) {
//   $result: invert($color);
//   $lightness: lightness($result);

//   // color.channel($color, "lightness", $space: hsl)

//   @if ($lightness < 40) {
//     $result: black;
//   }
//   @else {
//     $result: white;
//   }
//   @return $result;
// }

@function bwContrast($color) {
  $result: color.invert($color);
  $lightness: color.channel($result, "lightness", $space: hsl);

  @if ($lightness < 40) {
    $result: black;
  } @else {
    $result: white;
  }

  @return $result;
}


/// Encode Hex color to URL #FF9900 -> %23FF9900
/// =============================================
/// 
/// @example color.encode(#FF9900); 
/// 
/// @param {Color} $color The original color you need to encode
/// @return {string} The encoded color
@function encode($color)
{
    @if type-of($color) == color {
        $color: utils.str-replace(#{$color}, '#', '%23');
    }

    @return $color;
}



@function luminance($color) {
  $color: if(type-of($color) == 'color', $color, color($color));
  
  // Convertir la couleur en RGB
  $r: red($color) / 255;
  $g: green($color) / 255;
  $b: blue($color) / 255;

  // Appliquer le facteur de correction gamma
  $r: if($r <= 0.03928, $r / 12.92, pow(($r + 0.055) / 1.055, 2.4));
  $g: if($g <= 0.03928, $g / 12.92, pow(($g + 0.055) / 1.055, 2.4));
  $b: if($b <= 0.03928, $b / 12.92, pow(($b + 0.055) / 1.055, 2.4));

  // Calculer la luminance relative
  @return ($r * 0.2126 + $g * 0.7152 + $b * 0.0722);
}

@function contrast-color($color) {
  // Calculer la luminance de la couleur
  $luminance: luminance($color);

  // Définir un seuil de luminance (généralement 0.5)
  $threshold: 0.5;

  // Choisir la couleur de contraste en fonction de la luminance
  @return if($luminance > $threshold, #000000, #ffffff);
}